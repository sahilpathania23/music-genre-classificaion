#!/usr/bin/env python
# coding: utf-8

# In[3]:


get_ipython().system('pip install python_speech_features ')


# In[4]:


from python_speech_features import mfcc
import scipy.io.wavfile as wav
import numpy as np

from tempfile import TemporaryFile
import os
import pickle
import random 
import operator

import math
import numpy as np


# In[5]:


def getNeighbors(trainingSet, instance, k):
    distances = []
    for x in range (len(trainingSet)):
        dist = distance(trainingSet[x], instance, k )+ distance(instance, trainingSet[x], k)
        distances.append((trainingSet[x][2], dist))
    distances.sort(key=operator.itemgetter(1))
    neighbors = []
    for x in range(k):
        neighbors.append(distances[x][0])
    return neighbors


# In[6]:


def nearestClass(neighbors):
    classVote = {}
    for x in range(len(neighbors)):
        response = neighbors[x]
        if response in classVote:
            classVote[response]+=1 
        else:
            classVote[response]=1
    sorter = sorted(classVote.items(), key = operator.itemgetter(1), reverse=True)
    return sorter[0][0]


# In[7]:


def getAccuracy(testSet, predictions):
    correct = 0 
    for x in range (len(testSet)):
        if testSet[x][-1]==predictions[x]:
            correct+=1
    return 1.0*correct/len(testSet)


# In[8]:


from google.colab import drive

    drive.mount('/content/gdrive')
    root_path = 'gdrive/My Drive/Data/'


# In[11]:


directory = "/content/gdrive/My Drive/Data/genres_original/"
f= open("my.dat" ,'wb')
i=0
for folder in os.listdir(directory):
    i+=1
    print(folder)
    if i==11 :
        break   
    for file in os.listdir(directory+folder):
      try:
            (rate, sig) = wav.read(directory+folder+"/"+file)
            mfcc_feat = mfcc(sig, rate, winlen=0.020, appendEnergy=False)
            covariance = np.cov(np.matrix.transpose(mfcc_feat))
            mean_matrix = mfcc_feat.mean(0)
            feature = (mean_matrix, covariance, i)
            pickle.dump(feature, f)
      except Exception as e:
          
          print('Got an exception: ', e, ' in folder: ', folder, ' filename: ', file)        
f.close()


# In[14]:


dataset = []
def loadDataset(filename , split , trSet , teSet):
    with open("my.dat" , 'rb') as f:
        while True:
            try:
                dataset.append(pickle.load(f))
            except EOFError:
                f.close()
                break  
    for x in range(len(dataset)):
        if random.random() <split :      
            trSet.append(dataset[x])
        else:
            teSet.append(dataset[x])  
trainingSet = []
testSet = []
loadDataset("my.dat" , 0.66, trainingSet, testSet)


# In[16]:



def distance(instance1 , instance2 , k ):
    distance =0 
    mm1 = instance1[0] 
    cm1 = instance1[1]
    mm2 = instance2[0]
    cm2 = instance2[1]
    distance = np.trace(np.dot(np.linalg.inv(cm2), cm1)) 
    distance+=(np.dot(np.dot((mm2-mm1).transpose() , np.linalg.inv(cm2)) , mm2-mm1 )) 
    distance+= np.log(np.linalg.det(cm2)) - np.log(np.linalg.det(cm1))
    distance-= k
    return distance


# In[17]:


leng = len(testSet)
predictions = []
for x in range (leng):
    predictions.append(nearestClass(getNeighbors(trainingSet ,testSet[x] , 5))) 

accuracy1 = getAccuracy(testSet , predictions)
print(accuracy1)


# In[20]:


from collections import defaultdict
results = defaultdict(int)

directory = "/content/gdrive/My Drive/Data/genres_original/"

i = 1
for folder in os.listdir(directory):
    results[i] = folder
    i += 1
print(results)


# In[59]:


#url:https://uweb.engr.arizona.edu/~429rns/audiofiles/blues2.wav
test_dir = "/content/gdrive/My Drive/Data/Test/"
#test_file = test_dir + "test1.wav"
#test_file= test_dir + "test2.wav"
test_file= test_dir + "test3.wav"


# In[60]:



(rate, sig) = wav.read(test_file)
mfcc_feat = mfcc(sig, rate, winlen=0.020, appendEnergy=False)
covariance = np.cov(np.matrix.transpose(mfcc_feat))
mean_matrix = mfcc_feat.mean(0)
feature = (mean_matrix, covariance, i)


# In[61]:


pred = nearestClass(getNeighbors(dataset, feature, 5))
print(results[pred])


# In[ ]:




